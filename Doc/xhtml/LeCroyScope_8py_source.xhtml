<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: PySI-1.0.1/SignalIntegrity/Oyster/LeCroyScope.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.0.1</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_504e569591e9fcd2bc168123a7fbe8a9.xhtml">PySI-1.0.1</a></li><li class="navelem"><a class="el" href="dir_6ca1742612f9a887f3c749baec746e40.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_c5ea1eb8e128cf3f68c21a9cd9a1d983.xhtml">Oyster</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">LeCroyScope.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Oyster_1_1LeCroyScope.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">LeCroyScope.py</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of PySI.</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># PySI is free software: You can redistribute it and/or modify it under the terms of the</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># GNU General Public License as published by the Free Software Foundation, either version</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># 3 of the License, or any later version.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distrbuted in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1PySIException.xhtml">SignalIntegrity.PySIException</a> <span class="keyword">import</span> PySIException</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">SignalIntegrity.TimeDomain.Waveform.Waveform</a> <span class="keyword">import</span> Waveform</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">SignalIntegrity.TimeDomain.Waveform.TimeDescriptor</a> <span class="keyword">import</span> TimeDescriptor</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">class </span>PySIExceptionScope(PySIException):</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">def </span>__init__(self,message=&#39;&#39;):</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        PySIException.__init__(self,<span class="stringliteral">&#39;Scope&#39;</span>,message)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">class </span>LeCroyScope():</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    isConnected=<span class="keyword">False</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    serialNumber=<span class="keywordtype">None</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    instrument=<span class="keywordtype">None</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    platform=<span class="keywordtype">None</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    instanceCount=0</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">def </span>__init__(self,serialNumber,rootPath=None):</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        LeCroyScope.instanceCount=LeCroyScope.instanceCount+1</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">if</span> rootPath <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            self.m_rootPath=<span class="stringliteral">&#39;&#39;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            self.m_rootPath=rootPath</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">if</span> LeCroyScope.isConnected:</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">if</span> LeCroyScope.serialNumber == serialNumber:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                <span class="keywordflow">return</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">else</span>:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                del LeCroyScope.instrument</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                LeCroyScope.isConnected=<span class="keyword">False</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                LeCroyScope.serialNumber=<span class="keywordtype">None</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                LeCroyScope.instrument=<span class="keywordtype">None</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">if</span> serialNumber==<span class="keywordtype">None</span>:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            serialNumber=<span class="stringliteral">&#39;None&#39;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keyword">import</span> platform</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        LeCroyScope.platform=platform.system()</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">if</span> LeCroyScope.platform == <span class="stringliteral">&#39;Linux&#39;</span>:</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keyword">import</span> usbtmc</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            devs=usbtmc.usbtmc.list_devices()</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">for</span> dev <span class="keywordflow">in</span> devs:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="keywordflow">try</span>:</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                    <span class="keywordflow">if</span> dev.serial_number == serialNumber:</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                        LeCroyScope.instrument=usbtmc.Instrument(dev)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                        LeCroyScope.instrument.write(<span class="stringliteral">&#39;CHDR OFF&#39;</span>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                        <span class="keywordflow">print</span> LeCroyScope.instrument.ask(<span class="stringliteral">&#39;*IDN?&#39;</span>)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        <span class="comment">#LeCroyScope.instrument.write(&#39;*RST&#39;)</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        LeCroyScope.instrument.timeout=250000</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                        LeCroyScope.isConnected = <span class="keyword">True</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                        LeCroyScope.serialNumber = serialNumber</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                        <span class="keywordflow">return</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordflow">except</span>:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                    <span class="keywordflow">pass</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keyword">import</span> visa</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="comment">#pyvisa.resources.messagebased.MessageBasedResource</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            rm=visa.ResourceManager()</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            resourceList=rm.list_resources()</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">for</span> resource <span class="keywordflow">in</span> resourceList:</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                tokenList=resource.split(<span class="stringliteral">&#39;::&#39;</span>)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">if</span> serialNumber <span class="keywordflow">in</span> tokenList:</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    LeCroyScope.instrument=rm.open_resource(resource)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    LeCroyScope.instrument.chunk_size=1024*1024</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    LeCroyScope.instrument.timeout=250000</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    LeCroyScope.instrument.write(<span class="stringliteral">&#39;CHDR OFF&#39;</span>)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keywordflow">print</span> LeCroyScope.instrument.query(<span class="stringliteral">&#39;*IDN?&#39;</span>)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    <span class="comment">#LeCroyScope.instrument.write(&#39;*RST&#39;)</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    LeCroyScope.isConnected = <span class="keyword">True</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    LeCroyScope.serialNumber = serialNumber</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="keywordflow">return</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> LeCroyScope.isConnected:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">raise</span> PySIExceptionScope(<span class="stringliteral">&#39;cannot connect to: &#39;</span>+serialNumber)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">def </span>SetPath(self,path):</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        self.m_rootPath=path</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">return</span> self</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">def </span>GetPath(self):</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">return</span> self.m_rootPath</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">def </span>Indent(self,path):</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        self.m_rootPath=<span class="stringliteral">&#39;.&#39;</span>.join(self.m_rootPath.split(<span class="stringliteral">&#39;.&#39;</span>)+path.split(<span class="stringliteral">&#39;.&#39;</span>))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">def </span>Outdent(self):</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        pathList=self.m_rootPath.split(<span class="stringliteral">&#39;.&#39;</span>)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">if</span> len(pathList)&gt;0:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            self.m_rootPath=<span class="stringliteral">&#39;.&#39;</span>.join([pathList[i]</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(pathList)-1)])</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">def </span>_FormGetPropertyString(self,path):</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;VBS? &#39;return=&quot;</span>+<span class="stringliteral">&#39;.&#39;</span>.join(self.m_rootPath.split(<span class="stringliteral">&#39;.&#39;</span>)+\</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            path.split(<span class="stringliteral">&#39;.&#39;</span>))+<span class="stringliteral">&quot;&#39;&quot;</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">def </span>_FormGetPropertyStringNoError(self,path):</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;VBS? &#39;n=\&quot;\&quot;:on error resume next:n=&quot;</span>+<span class="stringliteral">&#39;.&#39;</span>.join(self.m_rootPath.split(<span class="stringliteral">&#39;.&#39;</span>)+\</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            path.split(<span class="stringliteral">&#39;.&#39;</span>))+<span class="stringliteral">&quot;:return=n&#39;&quot;</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">def </span>_FormWriteString(self,path,string):</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        fullPath=<span class="stringliteral">&#39;.&#39;</span>.join(self.m_rootPath.split(<span class="stringliteral">&#39;.&#39;</span>)+path.split(<span class="stringliteral">&#39;.&#39;</span>))</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">if</span> fullPath[0]==<span class="stringliteral">&#39;.&#39;</span>:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            fullPath=fullPath[1:]</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> string <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">if</span> string != <span class="stringliteral">&#39;True&#39;</span> <span class="keywordflow">and</span> string != <span class="stringliteral">&#39;False&#39;</span>:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                string =<span class="stringliteral">&quot;\&quot;&quot;</span>+string+<span class="stringliteral">&quot;\&quot;&quot;</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span> string <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;VBS &#39;&quot;</span>+fullPath+<span class="stringliteral">&quot;&#39;&quot;</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;VBS &#39;&quot;</span>+fullPath+<span class="stringliteral">&quot; = &quot;</span>+string+<span class="stringliteral">&quot;&#39;&quot;</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">def </span>GetPropertyString(self,path):</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        stringToWrite=self._FormGetPropertyString(path)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        self.instrument.write(stringToWrite)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        replyString = self.instrument.read()</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> replyString</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">def </span>GetPropertyStringPanelRemote(self,path):</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        stringToWrite=<span class="stringliteral">&quot;VBS? &#39;return=&quot;</span>+<span class="stringliteral">&#39;.&#39;</span>.join(self.m_rootPath.split(<span class="stringliteral">&#39;.&#39;</span>)+\</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            path.split(<span class="stringliteral">&#39;.&#39;</span>))+<span class="stringliteral">&quot;.GetAdaptedValueStringAutomation&#39;&quot;</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        self.m_scope.WriteString(stringToWrite,<span class="keyword">True</span>)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        replyString = self.m_scope.ReadString(8000)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">return</span> replyString</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">def </span>GetPropertyHex(self,path):</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        replyString=self.GetPropertyString(path)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> int(replyString[replyString.find(<span class="stringliteral">&#39;&amp;h&#39;</span>)+2:],16)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">def </span>GetPropertyInt(self,path):</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">return</span> int(self.GetPropertyString(path))</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">def </span>GetPropertyStringNoError(self,path):</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        stringToWrite=self._FormGetPropertyStringNoError(path)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        self.m_scope.WriteString(stringToWrite,<span class="keyword">True</span>)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        replyString = self.m_scope.ReadString(8000)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> replyString</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">def </span>GetPropertyIntNoError(self,path):</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        stringReturned=self.GetPropertyStringNoError(path)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span> stringReturned==<span class="stringliteral">&#39;&#39;</span>:</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">return</span> 0</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">return</span> int(stringReturned)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">def </span>SetPropertyString(self,path,string):</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> self.WriteString(string,path)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">def </span>SetPropertyHex(self,path,value):</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> self.WriteString(<span class="stringliteral">&#39;&amp;h&#39;</span>+hex(value).replace(<span class="stringliteral">&#39;0x&#39;</span>,<span class="stringliteral">&#39;&#39;</span>).strip(<span class="stringliteral">&#39;L&#39;</span>),path)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">def </span>SetPropertyInt(self,path,value):</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> self.WriteString(str(value),path)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">def </span>WriteString(self,string,path=None):</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">if</span> path==<span class="keywordtype">None</span>:</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> self.instrument.write(string)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            stringToWrite=self._FormWriteString(path,string)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">return</span> self.instrument.write(stringToWrite)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">def </span>Command(self,string):</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> self.instrument.write(string)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">def </span>Query(self,string,encoding=None):</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">if</span> LeCroyScope.platform == <span class="stringliteral">&#39;Linux&#39;</span>:</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">if</span> encoding <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">return</span> self.instrument.ask(string)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">else</span>:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">return</span> self.instrument.ask(string,encoding=encoding)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">if</span> encoding <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keywordflow">return</span> self.instrument.query(string)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">else</span>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                self.instrument.write(string)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordflow">return</span> self.instrument.read(string,encoding=encoding)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">def </span>__del__(self):</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        LeCroyScope.instanceCount=LeCroyScope.instanceCount-1</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> LeCroyScope.instanceCount == 0:</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            LeCroyScope.isConnected=<span class="keyword">False</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            LeCroyScope.serialNumber=<span class="keywordtype">None</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            LeCroyScope.instrument=<span class="keywordtype">None</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            LeCroyScope.platform=<span class="keywordtype">None</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">def </span>ReadWaveform(self,channelStr):</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        self.WriteString(<span class="stringliteral">&#39;COMM_FORMAT OFF, WORD, BIN&#39;</span>)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        wfstr=self.Query(channelStr+<span class="stringliteral">&#39;:waveform? dat1&#39;</span>,encoding=<span class="stringliteral">&#39;latin-1&#39;</span>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        ho=float(str(self.Query(channelStr+<span class="stringliteral">&#39;:INSP? HORIZ_OFFSET&#39;</span>).split(<span class="stringliteral">&#39;:&#39;</span>)[-1]).strip(<span class="stringliteral">&#39; &quot;\n&#39;</span>))</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        Ts=float(str(self.Query(channelStr+<span class="stringliteral">&#39;:INSP? HORIZ_INTERVAL&#39;</span>).split(<span class="stringliteral">&#39;:&#39;</span>)[-1]).strip(<span class="stringliteral">&#39; &quot;\n&#39;</span>))</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        Fs=1/Ts</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        m=float(str(self.Query(channelStr+<span class="stringliteral">&#39;:INSP? VERTICAL_GAIN&#39;</span>).split(<span class="stringliteral">&#39;:&#39;</span>)[-1]).strip(<span class="stringliteral">&#39; &quot;\n&#39;</span>))</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        b=float(str(self.Query(channelStr+<span class="stringliteral">&#39;:INSP? VERTICAL_OFFSET&#39;</span>).split(<span class="stringliteral">&#39;:&#39;</span>)[-1]).strip(<span class="stringliteral">&#39; &quot;\n&#39;</span>))</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        value=[((((ord(wfstr[i+16])+256*ord(wfstr[i+1+16]))-32768)%65536)-32768)*m-b <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(0,(len(wfstr)-16)/2*2,2)]</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        numPts=len(value)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">import</span> SignalIntegrity <span class="keyword">as</span> si</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        timeDescriptor = si.td.wf.TimeDescriptor(ho,numPts,Fs)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">#timeDescriptor.Print()</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        wf = si.td.wf.Waveform(timeDescriptor,value)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="comment">#wf.adaptionStrategy=&#39;Linear&#39;</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> wf</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">def </span>ReadWaveformAlternate(self,channelString):</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        wf = self.Query(channelString+<span class="stringliteral">&#39;:inspect? &quot;simple&quot;&#39;</span>)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">#m=float(self.Query(channelString+&#39;:inspect? VERTICAL_GAIN&#39;).split()[-2])</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">#b=float(self.Query(channelString+&#39;:inspect? VERTICAL_OFFSET&#39;).split()[-2])</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        wfn=[float(e) <span class="keywordflow">for</span> e <span class="keywordflow">in</span> str(wf).translate(<span class="keywordtype">None</span>,<span class="stringliteral">&#39;&quot;\r\n&#39;</span>).split()]</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        ho=float(self.Query(channelString+<span class="stringliteral">&#39;:inspect? HORIZ_OFFSET&#39;</span>).split()[-2])</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        Fs=1./float(self.Query(channelString+<span class="stringliteral">&#39;:inspect? HORIZ_INTERVAL&#39;</span>).split()[-2])</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        K=len(wfn)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(<a class="code" href="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(ho,K,Fs),wfn)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keyword">def </span>main():</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    ls=LeCroyScope(<span class="stringliteral">&#39;10.30.5.12&#39;</span>)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    wf=ls.ReadWaveform(<span class="stringliteral">&#39;F1&#39;</span>)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    wf.WriteToFile(<span class="stringliteral">&#39;CISTest.txt&#39;</span>)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    clkwf=ls.ReadWaveform(<span class="stringliteral">&#39;C1&#39;</span>)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    clkwf.WriteToFile(<span class="stringliteral">&#39;CISTestClk.txt&#39;</span>)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    thwf=ls.ReadWaveform(<span class="stringliteral">&#39;C3&#39;</span>)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    thwf.WriteToFile(<span class="stringliteral">&#39;CISTestTh.txt&#39;</span>)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    plt.clf()</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    plt.xlabel(<span class="stringliteral">&#39;time (us)&#39;</span>)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    plt.ylabel(<span class="stringliteral">&#39;amplitude&#39;</span>)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    plt.plot(wf.Times(<span class="stringliteral">&#39;us&#39;</span>),wf.Values(),label=<span class="stringliteral">&#39;data&#39;</span>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    plt.legend(loc=<span class="stringliteral">&#39;upper right&#39;</span>)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    plt.show()</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">print</span> <span class="stringliteral">&#39;done&#39;</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">pass</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    </div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&#39;__main__&#39;</span>:</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    main()</div><div class="ttc" id="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">SignalIntegrity.TimeDomain.Waveform.TimeDescriptor.TimeDescriptor</a></div><div class="ttdoc">time-axis for waveforms </div><div class="ttdef"><b>Definition:</b> <a href="TimeDescriptor_8py_source.xhtml#l00028">TimeDescriptor.py:28</a></div></div>
<div class="ttc" id="namespaceSignalIntegrity_1_1PySIException_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1PySIException.xhtml">SignalIntegrity.PySIException</a></div><div class="ttdef"><b>Definition:</b> <a href="PySIException_8py_source.xhtml#l00001">PySIException.py:1</a></div></div>
<div class="ttc" id="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">SignalIntegrity.TimeDomain.Waveform.Waveform.Waveform</a></div><div class="ttdoc">base class for all waveforms </div><div class="ttdef"><b>Definition:</b> <a href="Waveform_8py_source.xhtml#l00032">Waveform.py:32</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
