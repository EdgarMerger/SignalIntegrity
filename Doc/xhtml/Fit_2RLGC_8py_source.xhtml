<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Fit/RLGC.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.8</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_64d6a7688ad631b93cda5a536b7785bd.xhtml">Fit</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">RLGC.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Fit_1_1RLGC.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">RLGC.py</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">import</span> math,cmath</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1Fit_1_1LevMar_1_1LevMar.xhtml">SignalIntegrity.Lib.Fit.LevMar</a> <span class="keyword">import</span> LevMar</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">class </span>RLGCFitter(<a class="code" href="classSignalIntegrity_1_1Lib_1_1Fit_1_1LevMar_1_1LevMar.xhtml">LevMar</a>):</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">def </span>__init__(self,sp,guess,callback=None):</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        self.m_sp=sp</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        self.f=self.m_sp.m_f</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        self.Z0=self.m_sp.m_Z0</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        v=self.VectorizeSp(sp)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        LevMar.__init__(self,callback)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        LevMar.Initialize(self, [[g] <span class="keywordflow">for</span> g <span class="keywordflow">in</span> guess], v)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        self.ones=[1 <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        self.dZdR=self.ones</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        self.dZdRse=[math.sqrt(f) <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        self.p2f=[2.*math.pi*f <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        self.dZdL=[1j*p2f <span class="keywordflow">for</span> p2f <span class="keywordflow">in</span> self.p2f]</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        self.zeros=[0 <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        self.dZdG=self.zeros</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        self.dZdC=self.zeros</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        self.dZddf=self.zeros</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        self.dYdR=self.zeros</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        self.dYdRse=self.zeros</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        self.dYdL=self.zeros</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        self.dYdG=self.ones</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">def </span>fF(self,a):</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        (R,L,G,C,Rse,df)=(a[0][0],a[1][0],a[2][0],a[3][0],a[4][0],a[5][0])</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="comment"># pragma: silent exclude</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">try</span>:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            1./G</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">except</span>:</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            G=1e-12</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">try</span>:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            1./R</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">except</span>:</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            R=1e-12</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="comment"># pragma: include</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        self.Z=[R+Rse*math.sqrt(f)+1j*2.*math.pi*f*L <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        self.Y=[G+2.*math.pi*f*C*(1j+df) <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        self.gamma=[cmath.sqrt(z*y) <span class="keywordflow">for</span> (z,y) <span class="keywordflow">in</span> zip(self.Z,self.Y)]</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        self.Zc=[cmath.sqrt(z/y) <span class="keywordflow">for</span> (z,y) <span class="keywordflow">in</span> zip(self.Z,self.Y)]</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        self.rho=[(zc-self.Z0)/(zc+self.Z0) <span class="keywordflow">for</span> zc <span class="keywordflow">in</span> self.Zc]</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        self.rho2=[r*r <span class="keywordflow">for</span> r <span class="keywordflow">in</span> self.rho]</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        self.eg=[cmath.exp(-g) <span class="keywordflow">for</span> g <span class="keywordflow">in</span> self.gamma]</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        self.e2g=[egx*egx <span class="keywordflow">for</span> egx <span class="keywordflow">in</span> self.eg]</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        self.D=[1-r2*e2 <span class="keywordflow">for</span> (e2,r2) <span class="keywordflow">in</span> zip(self.e2g,self.rho2)]</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        self.S11=[r*(1-e2)/d <span class="keywordflow">for</span> (r,e2,d) <span class="keywordflow">in</span> zip(self.rho,self.e2g,self.D)]</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        self.S12=[(1-r2)*e/d <span class="keywordflow">for</span> (r2,e,d) <span class="keywordflow">in</span> zip(self.rho2,self.eg,self.D)]</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        S=[[[s11,s12],[s12,s11]] <span class="keywordflow">for</span> (s11,s12) <span class="keywordflow">in</span> zip(self.S11,self.S12)]</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        vS=self.VectorizeSp(S)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> vS</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">def </span>fJ(self,a,Fa=None):</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">if</span> self.m_Fa <span class="keywordflow">is</span> <span class="keywordtype">None</span>: self.m_Fa=self.fF(a)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        (R,L,G,C,Rse,df)=(a[0][0],a[1][0],a[2][0],a[3][0],a[4][0],a[5][0])</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        dZ=[self.dZdR,self.dZdL,self.dZdG,self.dZdC,self.dZdRse,self.dZddf]</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        dYdC=[p2f*(1j+df) <span class="keywordflow">for</span> p2f <span class="keywordflow">in</span> self.p2f]</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        dYddf=[p2f*C <span class="keywordflow">for</span> p2f <span class="keywordflow">in</span> self.p2f]</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        dY=[self.dYdR,self.dYdL,self.dYdG,dYdC,self.dYdRse,dYddf]</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        dgamma=[[1./(2.*cmath.sqrt(z*y))*(dz*y+z*dy)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keywordflow">for</span> (z,y,dz,dy) <span class="keywordflow">in</span> zip(self.Z,self.Y,dZ[i],dY[i])]</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(6)]</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        dZc=[[-1./2*(-dz*y+z*dy)/(y*y*cmath.sqrt(z/y))</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">for</span> (z,y,dz,dy) <span class="keywordflow">in</span> zip(self.Z,self.Y,dZ[i],dY[i])]</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(6)]</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        drho=[[2.*dzc*self.Z0/((zc+self.Z0)*(zc+self.Z0))</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">for</span> (zc,dzc) <span class="keywordflow">in</span> zip(self.Zc,dZc[i])] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(6)]</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        D2=[d*d <span class="keywordflow">for</span> d <span class="keywordflow">in</span> self.D]</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        dS11=[[-2.*r*e2*(r2-1)/d2*dg+(1-e2)*(1+r2*e2)/d2*dr</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">for</span> (r,r2,e2,d2,dg,dr) <span class="keywordflow">in</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    zip(self.rho,self.rho2,self.e2g,D2,dgdx,drdx)]</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                            <span class="keywordflow">for</span> (dgdx,drdx) <span class="keywordflow">in</span> zip(dgamma,drho)]</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        dS12=[[e*(r2-1)*(1+r2*e2)/d2*dg-2.*r*e*(1-e2)/d2*dr</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">for</span> (r,r2,e,e2,d2,dg,dr) <span class="keywordflow">in</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    zip(self.rho,self.rho2,self.eg,self.e2g,D2,dgdx,drdx)]</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                            <span class="keywordflow">for</span> (dgdx,drdx) <span class="keywordflow">in</span> zip(dgamma,drho)]</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        dS=[[[[dS11[i][n],dS12[i][n]],[dS12[i][n],dS11[i][n]]]</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.f))] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(6)]</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        vdS=[self.VectorizeSp(ds) <span class="keywordflow">for</span> ds <span class="keywordflow">in</span> dS]</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> [[vdS[m][r][0] <span class="keywordflow">for</span> m <span class="keywordflow">in</span> range(len(a))] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(Fa))]</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">def </span>VectorizeSp(self,sp):</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        N=range(len(sp));P=range(len(sp[0]))</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        v=[[sp[n][r][c]] <span class="keywordflow">for</span> n <span class="keywordflow">in</span> N <span class="keywordflow">for</span> r <span class="keywordflow">in</span> P <span class="keywordflow">for</span> c <span class="keywordflow">in</span> P]</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">return</span> v</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">def </span>AdjustVariablesAfterIteration(self,a):</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(a)):</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            a[r][0]=abs(a[r][0].real)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> a</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">def </span>Results(self):</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">return</span> self.m_a</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">class </span>RLGCFitter2(<a class="code" href="classSignalIntegrity_1_1Lib_1_1Fit_1_1LevMar_1_1LevMar.xhtml">LevMar</a>):</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">def </span>__init__(self,sp,guess,callback=None):</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        self.m_sp=sp</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        self.f=self.m_sp.m_f</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        self.Z0=self.m_sp.m_Z0</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        v=self.VectorizeSp(sp)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        LevMar.__init__(self,callback)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        LevMar.Initialize(self, [[g] <span class="keywordflow">for</span> g <span class="keywordflow">in</span> guess], v)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        self.ones=[1 <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        self.dZdR=self.ones</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        self.dZdRse=[math.sqrt(f) <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        self.p2f=[2.*math.pi*f <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        self.dZdL=[1j*p2f <span class="keywordflow">for</span> p2f <span class="keywordflow">in</span> self.p2f]</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        self.zeros=[0 <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        self.dZdG=self.zeros</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        self.dZdC=self.zeros</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        self.dZddf=self.zeros</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        self.dYdR=self.zeros</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        self.dYdRse=self.zeros</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        self.dYdL0=self.zeros</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        self.dYdLinf=self.zeros</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        self.dYdfm=self.zeros</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        self.dYdb=self.zeros</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        self.dYdG=self.ones</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">def </span>fF(self,a):</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        (R,G,C,Rse,df,L0,Linf,fm,b)=(a[0][0],a[1][0],a[2][0],a[3][0],a[4][0],a[5][0],a[6][0],a[7][0],a[8][0])</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment"># pragma: silent exclude</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">try</span>:</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            1./G</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">except</span>:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            G=1e-12</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">try</span>:</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            1./R</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">except</span>:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            R=1e-12</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="comment"># pragma: include</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        self.ffm=[f/fm <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        self.ffmb=[pow(ffm,b) <span class="keywordflow">for</span> ffm <span class="keywordflow">in</span> self.ffm]</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        self.L=[(L0+Linf*ffmb)/(1.+ffmb) <span class="keywordflow">for</span> ffmb <span class="keywordflow">in</span> self.ffmb]</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        self.Z=[R+Rse*math.sqrt(f)+1j*2.*math.pi*f*L <span class="keywordflow">for</span> (L,f) <span class="keywordflow">in</span> zip(self.L,self.f)]</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        self.Y=[G+2.*math.pi*f*C*(1j+df) <span class="keywordflow">for</span> f <span class="keywordflow">in</span> self.f]</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        self.gamma=[cmath.sqrt(z*y) <span class="keywordflow">for</span> (z,y) <span class="keywordflow">in</span> zip(self.Z,self.Y)]</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        self.Zc=[cmath.sqrt(z/y) <span class="keywordflow">for</span> (z,y) <span class="keywordflow">in</span> zip(self.Z,self.Y)]</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        self.rho=[(zc-self.Z0)/(zc+self.Z0) <span class="keywordflow">for</span> zc <span class="keywordflow">in</span> self.Zc]</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        self.rho2=[r*r <span class="keywordflow">for</span> r <span class="keywordflow">in</span> self.rho]</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        self.eg=[cmath.exp(-g) <span class="keywordflow">for</span> g <span class="keywordflow">in</span> self.gamma]</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        self.e2g=[egx*egx <span class="keywordflow">for</span> egx <span class="keywordflow">in</span> self.eg]</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        self.S11=[r*(1-e2)/(1-r2*e2) <span class="keywordflow">for</span> (r,e2,r2) <span class="keywordflow">in</span> zip(self.rho,self.e2g,self.rho2)]</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        self.S12=[(1-r2)*e/(1-r2*e2) <span class="keywordflow">for</span> (r2,e,e2) <span class="keywordflow">in</span> zip(self.rho2,self.eg,self.e2g)]</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        S=[[[s11,s12],[s12,s11]] <span class="keywordflow">for</span> (s11,s12) <span class="keywordflow">in</span> zip(self.S11,self.S12)]</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        vS=self.VectorizeSp(S)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">return</span> vS</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">def </span>fJ(self,a,Fa=None):</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">if</span> self.m_Fa <span class="keywordflow">is</span> <span class="keywordtype">None</span>: self.m_Fa=self.fF(a)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        (R,G,C,Rse,df,L0,Linf,fm,b)=(a[0][0],a[1][0],a[2][0],a[3][0],a[4][0],a[5][0],a[6][0],a[7][0],a[8][0])</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        dffmbdfm=[-ffmb*b/fm <span class="keywordflow">for</span> ffmb <span class="keywordflow">in</span> self.ffmb]</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        dffmbdb=[ffmb*math.log(ffm+1e-15) <span class="keywordflow">for</span> (ffmb,ffm) <span class="keywordflow">in</span> zip(self.ffm,self.ffmb)]</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        dLdL0=[1./(1.+ffmb) <span class="keywordflow">for</span> ffmb <span class="keywordflow">in</span> self.ffmb]</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        dLdLinf=[ffmb/(1.+ffmb) <span class="keywordflow">for</span> ffmb <span class="keywordflow">in</span> self.ffmb]</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        dLdfm=[(Linf-L0)/((1.+ffmb)*(1.+ffmb))*dffmbdfme <span class="keywordflow">for</span> (ffmb,dffmbdfme) <span class="keywordflow">in</span> zip(self.ffmb,dffmbdfm)]</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        dLdb=[(Linf-L0)/((1.+ffmb)*(1.+ffmb))*dffmbdbe <span class="keywordflow">for</span> (ffmb,dffmbdbe) <span class="keywordflow">in</span> zip(self.ffmb,dffmbdb)]</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        dZdL0=[dZdL*dLdL0e <span class="keywordflow">for</span> (dZdL,dLdL0e) <span class="keywordflow">in</span> zip(self.dZdL,dLdL0)]</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        dZdLinf=[dZdL*dLdLinfe <span class="keywordflow">for</span> (dZdL,dLdLinfe) <span class="keywordflow">in</span> zip(self.dZdL,dLdLinf)]</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        dZdfm=[dZdL*dLdfme <span class="keywordflow">for</span> (dZdL,dLdfme) <span class="keywordflow">in</span> zip(self.dZdL,dLdfm)]</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        dZdb=[dZdL*dLdbe <span class="keywordflow">for</span> (dZdL,dLdbe) <span class="keywordflow">in</span> zip(self.dZdL,dLdb)]</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        dZ=[self.dZdR,self.dZdG,self.dZdC,self.dZdRse,self.dZddf,dZdL0,dZdLinf,dZdfm,dZdb]</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        dYdC=[p2f*(1j+df) <span class="keywordflow">for</span> p2f <span class="keywordflow">in</span> self.p2f]</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        dYddf=[p2f*C <span class="keywordflow">for</span> p2f <span class="keywordflow">in</span> self.p2f]</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        dY=[self.dYdR,self.dYdG,dYdC,self.dYdRse,dYddf,self.dYdL0,self.dYdLinf,self.dYdfm,self.dYdb]</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        dgamma=[[1./(2.*cmath.sqrt(z*y))*(dz*y+z*dy)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">for</span> (z,y,dz,dy) <span class="keywordflow">in</span> zip(self.Z,self.Y,dZ[i],dY[i])]</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(9)]</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        dZc=[[-1./2*(-dz*y+z*dy)/(y*y*cmath.sqrt(z/y))</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">for</span> (z,y,dz,dy) <span class="keywordflow">in</span> zip(self.Z,self.Y,dZ[i],dY[i])]</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(9)]</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        drho=[[2.*dzc*self.Z0/((zc+self.Z0)*(zc+self.Z0))</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keywordflow">for</span> (zc,dzc) <span class="keywordflow">in</span> zip(self.Zc,dZc[i])]</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(9)]</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        e3g=[egx*egx*egx <span class="keywordflow">for</span> egx <span class="keywordflow">in</span> self.eg]</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        e4g=[egx*egx*egx*egx <span class="keywordflow">for</span> egx <span class="keywordflow">in</span> self.eg]</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        rho3=[r*r*r <span class="keywordflow">for</span> r <span class="keywordflow">in</span> self.rho]</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        rho4=[r*r*r*r <span class="keywordflow">for</span> r <span class="keywordflow">in</span> self.rho]</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        dS11=[[(2*r*e2-2.*r3*e2)/((r2*e2-1)*(r2*e2-1))*dg+</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            (-e2-r2*e4+1.+r2*e2)/((r2*e2-1)*(r2*e2-1))*dr</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">for</span> (r,r2,r3,r4,e,e2,e3,e4,dg,dr) <span class="keywordflow">in</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    zip(self.rho,self.rho2,rho3,rho4,self.eg,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        self.e2g,e3g,e4g,dgammadx,drhodx)]</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                            <span class="keywordflow">for</span> (dgammadx,drhodx) <span class="keywordflow">in</span> zip(dgamma,drho)]</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        dS12=[[(e3*r4-e-e3*r2+e*r2)/((r2*e2-1)*(r2*e2-1))*dg+</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            (-2.*e*r+2.*e3*r)/((r2*e2-1)*(r2*e2-1))*dr</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keywordflow">for</span> (r,r2,r3,r4,e,e2,e3,e4,dg,dr) <span class="keywordflow">in</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    zip(self.rho,self.rho2,rho3,rho4,self.eg,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        self.e2g,e3g,e4g,dgammadx,drhodx)]</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <span class="keywordflow">for</span> (dgammadx,drhodx) <span class="keywordflow">in</span> zip(dgamma,drho)]</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        dS=[[[[dS11[i][n],dS12[i][n]],[dS12[i][n],dS11[i][n]]]</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.f))]</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(9)]</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        vdS=[self.VectorizeSp(ds) <span class="keywordflow">for</span> ds <span class="keywordflow">in</span> dS]</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">return</span> [[vdS[m][r][0] <span class="keywordflow">for</span> m <span class="keywordflow">in</span> range(len(a))] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(Fa))]</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">def </span>VectorizeSp(self,sp):</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        N=range(len(sp));P=range(len(sp[0]))</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        v=[[sp[n][r][c]] <span class="keywordflow">for</span> n <span class="keywordflow">in</span> N <span class="keywordflow">for</span> r <span class="keywordflow">in</span> P <span class="keywordflow">for</span> c <span class="keywordflow">in</span> P]</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">return</span> v</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">def </span>AdjustVariablesAfterIteration(self,a):</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(a)):</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            a[r][0]=abs(a[r][0].real)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">return</span> a</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">def </span>Results(self):</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">return</span> self.m_a</div><div class="ttc" id="classSignalIntegrity_1_1Lib_1_1Fit_1_1LevMar_1_1LevMar_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Fit_1_1LevMar_1_1LevMar.xhtml">SignalIntegrity.Lib.Fit.LevMar.LevMar</a></div><div class="ttdoc">Implements the Levenberg-Marquardt algorithm for non-linear fitting. </div><div class="ttdef"><b>Definition:</b> <a href="LevMar_8py_source.xhtml#l00052">LevMar.py:52</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
